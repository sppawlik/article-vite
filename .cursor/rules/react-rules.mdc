---
description: general ruless for react
globs: *.tsx
alwaysApply: false
---

# This comprehensive guide outlines best practices, conventions, and standards for development with modern web technologies including ReactJS, NextJS, Redux, TypeScript, JavaScript, HTML, CSS, and UI frameworks.
# React Project Rules and Conventions

## Project Structure
- `/src`
  - `/components` - Reusable UI components
  - `/features` - Feature-specific components and logic
  - `/hooks` - Custom React hooks
  - `/utils` - Utility functions
  - `/types` - TypeScript type definitions
  - `/api` - API related code
  - `/styles` - Global styles and themes

## Coding Standards
- Write clean, maintainable, and scalable code
- Follow SOLID principles
- Prefer functional and declarative programming patterns over imperative
- Emphasize type safety and static analysis
- Practice component-driven development

### Component Guidelines
- Use functional components with TypeScript
- One component per file
- Component files should use `.tsx` extension
- Component names must use PascalCase
- Props interfaces should be named `[ComponentName]Props`

### Hooks Rules
- Custom hooks must start with 'use'
- Place shared hooks in `/hooks` directory
- Document hook parameters and return values

### Code Style
- Use tabs for indentation
- Use single quotes for strings (except to avoid escaping)
- Add space after keywords
- Add space before function declaration parentheses
- Space infix operators
- Add space after commas
- Keep else statements on the same line as closing curly braces
- Use curly braces for multi-line if statements

### Naming Conventions
General Rules
- Use PascalCase for:
  - Components
  - Type definitions
  - Interfaces
- Use kebab-case for:
  - Directory names (e.g., components/auth-wizard)
  - File names (e.g., user-profile.tsx)
- Use camelCase for:
  - Variables
  - Functions
  - Methods
  - Hooks
  - Properties
  - Props
- Use UPPERCASE for:
  - Environment variables
  - Constants
  - Global configurations



### React Best Practices
- Use functional components with TypeScript interfaces
- Extract reusable logic into custom hooks
- Implement proper cleanup in useEffect hooks

### Next.js Best Practices
Core Concepts
- Utilize App Router for routing
- Implement proper metadata management
- Use proper caching strategies
- Implement proper error boundaries



### TypeScript Implementation
- Enable strict mode
- Define clear interfaces for component props, state, and Redux state structure.
- Use type guards to handle potential undefined or null values safely.
- Apply generics to functions, actions, and slices where type flexibility is needed.
- Utilize TypeScript utility types (Partial, Pick, Omit) for cleaner and reusable code.
- Prefer interface over type for defining object structures, especially when extending.
- Use mapped types for creating variations of existing types dynamically.

### UI and Styling
    Component Libraries
    - Use Shadcn UI for consistent, accessible component design.
    - Integrate Radix UI primitives for customizable, accessible UI elements.
    - Apply composition patterns to create modular, reusable components.

### Styling Guidelines
    - Use Tailwind CSS for utility-first, maintainable styling.
    - Design with mobile-first, responsive principles for flexibility across devices.
    - Implement dark mode using CSS variables or Tailwindâ€™s dark mode features.
    - Ensure color contrast ratios meet accessibility standards for readability.
    - Maintain consistent spacing values to establish visual harmony.
    - Define CSS variables for theme colors and spacing to support easy theming and maintainability.

   
