
extend type Query {
    getUserArticles(owner: String!, link: String!): UserArticles
    listUserArticles(filter: TableUserArticlesFilterInput, limit: Int, nextToken: String): UserArticlesConnection
}

extend type Mutation {
    createUserArticles(input: CreateUserArticlesInput!): UserArticles
    updateUserArticles(input: UpdateUserArticlesInput!): UserArticles
    deleteUserArticles(input: DeleteUserArticlesInput!): UserArticles
}

extend type Subscription {
    onCreateUserArticles(owner: String, link: String, source: String, title: String, summary: String): UserArticles @aws_subscribe(mutations: ["createUserArticles"])
    onUpdateUserArticles(owner: String, link: String, source: String, title: String, summary: String): UserArticles @aws_subscribe(mutations: ["updateUserArticles"])
    onDeleteUserArticles(owner: String, link: String, source: String, title: String, summary: String): UserArticles @aws_subscribe(mutations: ["deleteUserArticles"])
}

input TableUserArticlesFilterInput {
    owner: TableStringFilterInput
    link: TableStringFilterInput
    source: TableStringFilterInput
    title: TableStringFilterInput
    summary: TableStringFilterInput
    url: TableStringFilterInput
    publishedDate: TableStringFilterInput
}

input CreateUserArticlesInput {
    owner: String!
    link: String!
    source: String
    title: String
    summary: String
    url: String
    publishedDate: String
    score: AWSJSON
}

input UpdateUserArticlesInput {
    owner: String!
    link: String!
    source: String
    title: String
    summary: String
    url: String
    publishedDate: String
    score: AWSJSON
}

input DeleteUserArticlesInput {
    owner: String!
    link: String!
}

type UserArticlesConnection {
    items: [UserArticles]
    nextToken: String
}

input TableStringFilterInput {
    ne: String
    eq: String
    le: String
    lt: String
    ge: String
    gt: String
    contains: String
    notContains: String
    between: [String]
    beginsWith: String
    attributeExists: Boolean
    size: ModelSizeInput
}

input TableIDFilterInput {
    ne: ID
    eq: ID
    le: ID
    lt: ID
    ge: ID
    gt: ID
    contains: ID
    notContains: ID
    between: [ID]
    beginsWith: ID
    attributeExists: Boolean
    size: ModelSizeInput
}

input TableBooleanFilterInput {
    ne: Boolean
    eq: Boolean
    attributeExists: Boolean
}

input TableIntFilterInput {
    ne: Int
    eq: Int
    le: Int
    lt: Int
    ge: Int
    gt: Int
    between: [Int]
    attributeExists: Boolean
}

input TableFloatFilterInput {
    ne: Float
    eq: Float
    le: Float
    lt: Float
    ge: Float
    gt: Float
    between: [Float]
    attributeExists: Boolean
}